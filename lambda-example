#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

class Person {
	friend std::ostream& operator<< (std::ostream& os, const Person& rhs);
	std::string name;
	int age;
public:
	Person() = default;
	Person(std::string name = "x", int age = 0) : name{ name }, age{ age } {};
	Person(const Person& p) = default;
	~Person() = default;
	void set_name(std::string name) { this->name = name; }
	std::string get_name() const { return this->name; }
	void set_age(int age) { this->age = age; }
	int get_age() const { return age; }
};

std::ostream& operator<< (std::ostream& os, const Person& rhs) {
	os << "[ " << rhs.name << ": " << rhs.age << "]";
	return os;
}

class People {
	std::vector <Person> people;
	int max_people;
public:
	People(int max = 10) : max_people(max) {}
	People(const People& p) = default;
	void add(std::string name, int age) {
		people.emplace_back(name, age);
	}
	void set_max_people(int max) {
		max_people = max;
	}
	int get_max_people() const {
		return max_people;
	}
std::vector<Person> get_people(int max_age) {
	std::vector <Person> result;
	int count{ 0 };
	std::copy_if(people.begin(),
		people.end(),
		std::back_inserter(result),
		[this, &count, max_age](const Person& p) {return p.get_age()  > max_age && ++count <= max_people;});
	return result;
	}
};

void test1() {
	std::cout << "\nTest1===================" << std::endl;
	People players;
	players.add("Jenny", 18);
	players.add("Elizabeth", 22);
	players.add("Gabriel", 33);
	players.add("Gandalf", 108);
	auto result = players.get_people(17);
	std::cout << std::endl;
	for (const auto& i : result)
		std::cout << i << std::endl;
	players.add("Frodo", 45);
	players.add("Sam", 23);
	players.add("George", 63);
	players.add("Helen", 109); 
	players.add("Emily", 78);
	players.add("Golom", 66);
	players.add("Gandalf the White", 35);
	result = players.get_people(19);
	std::cout << std::endl;
	for (const auto& i : result)
		std::cout << i << std::endl;
}

int main() {
	test1();
	return 0;
}
